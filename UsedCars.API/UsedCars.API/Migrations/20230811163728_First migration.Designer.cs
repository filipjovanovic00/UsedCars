// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UsedCars.API.Data;

#nullable disable

namespace UsedCars.API.Migrations
{
    [DbContext(typeof(UsedCarsDbContext))]
    [Migration("20230811163728_First migration")]
    partial class Firstmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UsedCarsWebApi.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriveType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GearboxType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Mileage")
                        .HasColumnType("bigint");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cars", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4b69b30-dad4-4673-bc49-b44ef61dd933"),
                            Approved = true,
                            Description = "test",
                            DriveType = "test",
                            GearboxType = "test",
                            Location = "Knezevac",
                            Mark = "test",
                            Mileage = 150000L,
                            Model = "test",
                            Price = 5000m,
                            UserId = new Guid("cfeb0e5e-5d09-464a-82dd-fe5d39e45ad9"),
                            Year = 2000
                        },
                        new
                        {
                            Id = new Guid("f2646c1e-f0b3-48fb-9e8c-0e62411e9f30"),
                            Approved = false,
                            Description = "test",
                            DriveType = "test",
                            GearboxType = "test",
                            Location = "Knezevac",
                            Mark = "test",
                            Mileage = 150000L,
                            Model = "test",
                            Price = 5000m,
                            UserId = new Guid("cfeb0e5e-5d09-464a-82dd-fe5d39e45ad9"),
                            Year = 2000
                        },
                        new
                        {
                            Id = new Guid("cb578e76-d0b3-443d-9d2d-84afd5a1c8a4"),
                            Approved = true,
                            Description = "test",
                            DriveType = "test",
                            GearboxType = "test",
                            Location = "Kragujevac",
                            Mark = "test",
                            Mileage = 150000L,
                            Model = "test",
                            Price = 5000m,
                            UserId = new Guid("af19ba81-1376-4a55-b2f3-a0cb6782f491"),
                            Year = 2000
                        },
                        new
                        {
                            Id = new Guid("a37ad9b1-8975-450a-84c5-b49869d5b7c2"),
                            Approved = false,
                            Description = "test",
                            DriveType = "test",
                            GearboxType = "test",
                            Location = "Kragujevac",
                            Mark = "test",
                            Mileage = 150000L,
                            Model = "test",
                            Price = 5000m,
                            UserId = new Guid("af19ba81-1376-4a55-b2f3-a0cb6782f491"),
                            Year = 2000
                        },
                        new
                        {
                            Id = new Guid("de1f391e-ae6e-4697-94e6-1b5445c8214e"),
                            Approved = true,
                            Description = "test",
                            DriveType = "test",
                            GearboxType = "test",
                            Location = "Kragujevac",
                            Mark = "test",
                            Mileage = 150000L,
                            Model = "test",
                            Price = 5000m,
                            UserId = new Guid("998902da-c58d-4963-ae0d-39079971e5cd"),
                            Year = 2000
                        },
                        new
                        {
                            Id = new Guid("351b2f6b-e575-4ed3-9e68-44da59482ef9"),
                            Approved = false,
                            Description = "test",
                            DriveType = "test",
                            GearboxType = "test",
                            Location = "Kragujevac",
                            Mark = "test",
                            Mileage = 150000L,
                            Model = "test",
                            Price = 5000m,
                            UserId = new Guid("998902da-c58d-4963-ae0d-39079971e5cd"),
                            Year = 2000
                        });
                });

            modelBuilder.Entity("UsedCarsWebApi.Models.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Pictures", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7ba02e3-74fa-4ffb-9659-a6fef0ec9c97"),
                            CarId = new Guid("d4b69b30-dad4-4673-bc49-b44ef61dd933"),
                            Path = "path"
                        },
                        new
                        {
                            Id = new Guid("641721fa-5687-4f73-b3a6-6057eb8911f9"),
                            CarId = new Guid("f2646c1e-f0b3-48fb-9e8c-0e62411e9f30"),
                            Path = "path"
                        },
                        new
                        {
                            Id = new Guid("f13725a3-4f9b-4643-97fe-10531cb3e4de"),
                            CarId = new Guid("cb578e76-d0b3-443d-9d2d-84afd5a1c8a4"),
                            Path = "path"
                        },
                        new
                        {
                            Id = new Guid("77bfb1bc-2396-42e2-9efd-95147e56817c"),
                            CarId = new Guid("a37ad9b1-8975-450a-84c5-b49869d5b7c2"),
                            Path = "path"
                        },
                        new
                        {
                            Id = new Guid("85407744-2272-4c5f-929e-894f0e7ec415"),
                            CarId = new Guid("de1f391e-ae6e-4697-94e6-1b5445c8214e"),
                            Path = "path"
                        },
                        new
                        {
                            Id = new Guid("327f49ec-02a3-4622-acc1-92be863fa15f"),
                            CarId = new Guid("351b2f6b-e575-4ed3-9e68-44da59482ef9"),
                            Path = "path"
                        });
                });

            modelBuilder.Entity("UsedCarsWebApi.Models.SavedSearch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SavedSearches", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("12a2e457-aed3-4350-a2c9-efdb4a0b13a8"),
                            Search = "Mercedes C klasa",
                            UserId = new Guid("cfeb0e5e-5d09-464a-82dd-fe5d39e45ad9")
                        },
                        new
                        {
                            Id = new Guid("de288baf-78ca-435d-b01b-57e98d84de4d"),
                            Search = "Zastava 101",
                            UserId = new Guid("cfeb0e5e-5d09-464a-82dd-fe5d39e45ad9")
                        },
                        new
                        {
                            Id = new Guid("2507ea60-34bd-4a14-966c-533cd60b0f1b"),
                            Search = "Peugeot 206",
                            UserId = new Guid("af19ba81-1376-4a55-b2f3-a0cb6782f491")
                        },
                        new
                        {
                            Id = new Guid("66809cf9-8021-4efb-a148-87cb2287da5b"),
                            Search = "BMW 5",
                            UserId = new Guid("af19ba81-1376-4a55-b2f3-a0cb6782f491")
                        },
                        new
                        {
                            Id = new Guid("c6abb9e1-c82b-4de3-abd5-a5732a1a490b"),
                            Search = "Opel Astra",
                            UserId = new Guid("998902da-c58d-4963-ae0d-39079971e5cd")
                        },
                        new
                        {
                            Id = new Guid("91b70203-f1d9-4523-83f5-0c4e14d99257"),
                            Search = "Audi A6",
                            UserId = new Guid("998902da-c58d-4963-ae0d-39079971e5cd")
                        });
                });

            modelBuilder.Entity("UsedCarsWebApi.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfeb0e5e-5d09-464a-82dd-fe5d39e45ad9"),
                            Email = "filipj@gmail.com",
                            FirstName = "Filip",
                            LastName = "Jovanovic",
                            Password = "password1",
                            Phone = "number",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("af19ba81-1376-4a55-b2f3-a0cb6782f491"),
                            Email = "danilos@gmail.com",
                            FirstName = "Danilo",
                            LastName = "Stevanovic",
                            Password = "password2",
                            Phone = "number",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("998902da-c58d-4963-ae0d-39079971e5cd"),
                            Email = "filipc@gmail.com",
                            FirstName = "Filip",
                            LastName = "Carovic",
                            Password = "password3",
                            Phone = "number",
                            Role = 0
                        });
                });

            modelBuilder.Entity("UsedCarsWebApi.Models.Car", b =>
                {
                    b.HasOne("UsedCarsWebApi.Models.User", null)
                        .WithMany("Cars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsedCarsWebApi.Models.Picture", b =>
                {
                    b.HasOne("UsedCarsWebApi.Models.Car", null)
                        .WithMany("Pictures")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsedCarsWebApi.Models.SavedSearch", b =>
                {
                    b.HasOne("UsedCarsWebApi.Models.User", null)
                        .WithMany("SavedSearches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsedCarsWebApi.Models.Car", b =>
                {
                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("UsedCarsWebApi.Models.User", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("SavedSearches");
                });
#pragma warning restore 612, 618
        }
    }
}
